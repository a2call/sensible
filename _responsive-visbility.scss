/**
 * remove  removes element from list
 * http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
 */
@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    }

    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

/**
 * mixin responsive-visibility
 * $visibility-breakpoints {[list]} list of breakpoints you want to interact with
 * $overwrite {[boolean]} if set true will generate classes that overwrite what ever visibility is active on that element
 *
 * exact:
 * @include responsive-visibility("only-mobile" "only-tablet" "only-desktop", true);
 *
 * up:
 * @include responsive-visibility("mobile" "tablet" "desktop", false);
 */
@mixin responsive-visibility (
  $visibility-breakpoints,
  $overwrite: false,
  $displaTypes: "inline" "inline-block"
){
  @each $breakpoint-active in $visibility-breakpoints {
    @include breakpoint($breakpoint-active) {
      $visibles: "";
      $invisibles: "";

      $visibles: unquote($visibles + ".is-visible-#{$breakpoint-active},");
      $invisibles: unquote($invisibles + ".is-hidden-#{$breakpoint-active},");

      @if $overwrite == true {
        $others: getOthersInList($breakpoint-active, $visibility-breakpoints);
        $othersRule: "";
        @each $other in $others {
          $invisibles: unquote($invisibles + ".is-visible-#{$other},");
        }
      }

      #{$visibles} {
        display: block !important;
        visibility: visible;
        @each $display in $displaTypes {
          &--#{$display} {
            display: #{$display};
          }
        }
      }
      #{$invisibles} {
        display: none !important;
        visibility: hidden;
      }
    }
  }
}
