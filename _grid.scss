// Column-layouts

// 00) false will set the grid elements to inline-block if true flexbox (consider using autoprefixer for better bowser support)
// 01) size of the gutter between the cols
// 02) the gutter between the columns can be padding or margin
// 03) the gutter can be on the right or the left side of every col
// 04) Provides additional classes for the grid in order have different available gutter sizes
// 05) Base font size used for the in-line-block gap fix: http://css-tricks.com/fighting-the-space-between-inline-block-elements/
// 06) Slug used for the grid classes (l- for SMACSS layout), empty string for no slug
// 07) If set to true, one push class per with will be available (margin-left)
// 08) Generated col names <-> withs (uncomment for classes like l-1/2, l-1/2 etc..)
// 09) Breakpoints used in the grid (ideally reduced to a minimum)
// 10) To avoid breaking the grid on Blackberry and some Firefox version you can set a rounding. 50% will be 50% - $rounding etc.. Set this to 0 if you don't need it.

// Configuration:

$sensible-modern:               true !default;    // [00]
$sensible-gutter:               1rem !default;    // [01]
$sensible-gutter-type:          margin !default;  // [02]
$sensible-gutter-direction:     left !default;    // [03]
$sensible-gutter-modifiers:     (                 // [04]
  "no-gap": 0,
  "large" : 2rem
  ) !default;
$sensible-base-font-size:       16px !default;    // [05]
$sensible-slug:                 "l-" !default;    // [06]
$sensible-push-classes:         false !default;   // [07]
$sensible-grid-widths:          (                 // [08]
  "one-whole"       : 100%,                       // 1\/1     : 100%,
  "one-half"        : 50%,                        // 1\/2     : 50%,
  "one-quarter"     : 25%,                        // 1\/4     : 25%,
  "three-quarters"  : 75%,                        // 3\/4     : 75%,
  "one-third"       : 33.333%,                    // 1\/3     : 33.333%,
  "two-thirds"      : 66.666%,                    // 2\/3     : 66.666%,
  "one-fifth"       : 20%,                        // 1\/5     : 20%,
  "four-fifths"     : 80%,                        // 4\/5     : 80%,
  "one-sixth"       : 16.666%,                    // 1\/6     : 16.666%,
  "five-sixths"     : 83.333%                     // 5\/6     : 83.333%
  ) !default;
$sensible-grid-breakpoints:     "not-tablet" "tablet" "tablet-portrait" "not-mobile" "mobile" "mobile-portrait" "print" !default; // [09]
$sensible-rounding:             0.0095% !default;  // [10]

// Configuration end
$sensible-gutter-correction:  calc( -#{$sensible-gutter} + #{-1px} );

// rounding is not an issue with flexbox
@if $sensible-modern {
  $sensible-rounding: 0;
  $sensible-gutter-correction: -#{$sensible-gutter};
}

// class that wraps a grid cols
%#{$sensible-slug}grid,
.#{$sensible-slug}grid {
  @if $sensible-modern {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  } @else {
    // fixes the webkit inline-block issue
    font-size: 0.1px;
  }

  @if $sensible-gutter > 0 {
    margin-#{$sensible-gutter-direction}: $sensible-gutter-correction;
  }

  %#{$sensible-slug}grid-cell,
  .#{$sensible-slug}grid-cell {
    //cells only have a gutter inside the grid
    #{$sensible-gutter-type}-#{$sensible-gutter-direction}: $sensible-gutter;

    @if not $sensible-modern {
      font-size: $sensible-base-font-size;
      } @else {
        display: block;
      }
    }

    @if $sensible-gutter-modifiers != false {
      @each $gutter-modifier, $new-gutter in $sensible-gutter-modifiers {
       &--#{$gutter-modifier} {
        margin-#{$sensible-gutter-direction}: -$new-gutter;
        @if $new-gutter > 0 and not $sensible-modern {
          margin-#{$sensible-gutter-direction}: calc( -#{$new-gutter} + #{-1px} );
        }
        %#{$sensible-slug}grid-cell,
        .#{$sensible-slug}grid-cell {
          #{$sensible-gutter-type}-#{$sensible-gutter-direction}: $new-gutter;
        }
      }
    }
  }

  &--gapped {
    & > %#{$sensible-slug}grid-cell,
    & > .#{$sensible-slug}grid-cell {
      #{$sensible-gutter-type}-bottom: $sensible-gutter;
    }
  }
}

%#{$sensible-slug}grid-cell,
.#{$sensible-slug}grid-cell {
  display: inline-block;
  vertical-align: top;
  box-sizing: border-box;
}

// generate classes for grid cells
@mixin sensibleGridClasses ($device) {
  $deviceString: null;

  @if $device {
    $deviceString: "--#{$device}";
  }

  // loops the $gridWiths map
  @each $gridWidth, $width in $sensible-grid-widths {
    $width: $width / 10% * (10% - $sensible-rounding);

    %#{$sensible-slug}#{$gridWidth}#{$deviceString},
    .#{$sensible-slug}#{$gridWidth}#{$deviceString} {
      width: $width;
    }
    @if $sensible-push-classes {
      %#{$sensible-slug}push-#{$gridWidth}#{$deviceString},
      .#{$sensible-slug}push-#{$gridWidth}#{$deviceString}{
        margin-left: $width;
      }
    }
  }

  @if $sensible-gutter-type == margin {
    @each $gridWidth, $width in $sensible-grid-widths {
      $width: $width / 10% * (10% - $sensible-rounding);
      @if $sensible-gutter > 0 {
        $width: calc(#{$width} - #{$sensible-gutter});
      }
      %#{$sensible-slug}grid,
      .#{$sensible-slug}grid {
        & > %#{$sensible-slug}#{$gridWidth}#{$deviceString},
        & > .#{$sensible-slug}#{$gridWidth}#{$deviceString} {
          width: $width;
        }
      }
    }
  }
}

// includes the default classes
@include sensibleGridClasses($device: false);

// includes the classes for the bereakpoints listed in $gridbreakpoints
@each $breakpoint in $sensible-grid-breakpoints {
  @include breakpoint( $breakpoint ) {
    @include sensibleGridClasses( $device: $breakpoint);
  }
}

@mixin sensibleGrid () {
  @warn 'this mixin no longer works; sensible grid is now rendered at inclusion';
}
